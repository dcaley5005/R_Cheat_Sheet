---
title: "Data Visualization"
author: "Daniel Caley"
date: "4/3/2020"
output: 
  html_document:
    keep_md: true
    toc: true
    toc_float: true
---

```{r setup, message=FALSE, warning=FALSE}

knitr::opts_chunk$set(fig.path = "README_figs/README-")
library(tidyverse)
library(plotly)
library(DT)

```



```{r echo = FALSE, message=FALSE, warning=FALSE}

covid <- read_csv("https://raw.githubusercontent.com/RamiKrispin/coronavirus/master/csv/coronavirus.csv")

covid <- covid  %>% 
  group_by(date, country, type) %>% 
  summarize(cases = sum(cases)) %>% 
  ungroup() %>% 
  mutate(is_china = if_else(country == "China","China","Not China"))

confirmed_cases_china_vs_world <- covid %>% 
  filter(date <= '2020-03-15' & type == "confirmed") %>% 
  group_by(is_china, date) %>% 
  summarise(cases = sum(cases)) %>% 
  mutate(cum_cases = cumsum(cases))

glimpse(confirmed_cases_china_vs_world)

```


# Line Chart

Data Visualization
https://www.udemy.com/course/r-tidyverse-reporting-and-analytics-for-excel-users/learn/lecture/8820024#overview

```{r, message=FALSE, warning=FALSE}



ggplot(confirmed_cases_china_vs_world, aes(x = date, y = cum_cases, group = is_china, color = is_china)) +
  geom_line() +
  geom_point() +
  scale_y_continuous(labels = scales::comma, limits = c(0, 85000)) +
  labs(
    title = "Confirmed Cases in China vs. The World",
    y = "Cumulative Confirmed Cases",
    x = "Date",
    color = "Is China"
    ) +
  theme(
    text = element_text(size = 12),
    axis.text.x =  element_text(size = 12, angle = 45, hjust = 1),
    axis.text.y = element_text(size = 12)
    )

```


# Reordering
```{r echo=FALSE, message=FALSE, warning=FALSE}

df_census_data <- read_csv("census_bureau.csv")

census_data <- df_census_data %>% filter(census_current_flag == TRUE & 
                                          state_abb != "AK",
                                          state_abb != "HI",
                                          state_abb != "DC") %>% 
                                mutate(state_name = tolower(state_name))


```


```{r message=FALSE, warning=FALSE}




#now make an analysis from the historical data from past 9 years
census_data %>% ggplot(aes(reorder(state_abb,desc(population)), median_household_income)) +
            geom_col(color = "red", fill = "white") +
            labs(x = "State Name", y = "Median Income", title = "State Population") +
            theme_minimal() + 
            theme(axis.text.x = element_text(angle = 80, vjust = 0.5, hjust = 1)) +
            scale_y_continuous(labels = scales::comma) +
            theme(axis.text.x = element_text(angle = 90),
                  text = element_text(size= 12))

```



# Boxplot

```{r, message=FALSE}


ggplot(mpg) + 
  geom_boxplot(mapping = aes(x=class, y=hwy))  +
  scale_y_continuous(labels = scales::comma) +
  labs(
    title = "Car Boxplot",
    y = "Highway",
    x = "Class"
    ) +
  theme(
    text = element_text(size = 12),
    axis.text.x =  element_text(size = 12, angle = 45, hjust = 1),
    axis.text.y = element_text(size = 12)
    )


```


Allows you to space out the dots rather than them being on top of each other




# Scatter Plot

```{r}

ggplot(mpg) + 
  geom_jitter(aes(x=displ, y = hwy/100)) +
  scale_y_continuous(labels = scales::percent, limits = c(.10, .45)) +
  labs(
    title = "Scatter Plot",
    y = "Highway",
    x = "Display"
    ) +
  theme(
    text = element_text(size = 12),
    axis.text.x =  element_text(size = 12, angle = 45, hjust = 1),
    axis.text.y = element_text(size = 12)
    )


```

## Drawing Lines 

Aids the eye in seeing patterns in the presence of over plotting. geom_smooth() and stat_smooth() are effectively aliases: they both use the same arguments. Use stat_smooth() if you want to display the results with a non-standard geom.

```{r, warning=FALSE, message=FALSE}

ggplot(mpg, aes(x=displ, y = hwy)) + 
  geom_point() +
  geom_smooth()



```
## Linear Model
```{r}

ggplot(mpg, aes(x=displ, y = hwy)) + 
  geom_point() +
  geom_smooth(method = 'lm')

```

# Anotating
## Drawing Boxes
```{r}

ggplot(mpg,mapping = aes(x=displ,y=hwy)) +
  geom_jitter(mapping=aes(color=class)) +
  geom_smooth() +
  annotate("rect",xmin=1.5,xmax=2,ymin=40,ymax = 45, color="red", alpha = 0.3) +
  annotate("text",x=3,y=43,label="Let's highlight these \n outliers") +
  ggtitle("Lets lavel our chart","Add your subtitle here")




```
## Drawing Dotted Lines
```{r}

who_events <- tribble(
  ~ date, ~ event,
  "2020-01-30", "Global health\nemergency declared",
  "2020-03-11", "Pandemic\ndeclared",
  "2020-02-13", "China reporting\nchange"
) %>% mutate(date = as.Date(date))

plt_cum_confirmed_cases_china_vs_world <- ggplot(confirmed_cases_china_vs_world) +
  geom_line(aes(x = date, y = cum_cases, group = is_china, color = is_china)) +
  ylab("Cumulative Confirmed Cases")

plt_cum_confirmed_cases_china_vs_world +
  geom_vline(aes(xintercept = date), data = who_events, linetype = "dashed") +
  geom_text(aes(x = date ,label = event), data = who_events, y = 35000)




```

## Drawing Logrithemic Lines
```{r}
# Filter for China, from Feb 15
china_after_feb15 <- confirmed_cases_china_vs_world %>%
  filter(is_china == "China", date >= "2020-02-15")

# Using china_after_feb15, draw a line plot cum_cases vs. date
# Add a smooth trend line using linear regression, no error bars
ggplot(china_after_feb15, aes(x = date, y = cum_cases)) +
  geom_line() +
  geom_smooth(method = "lm", se = FALSE) +
  ylab("Cumulative confirmed cases")


# Filter confirmed_cases_china_vs_world for not China
not_china <- confirmed_cases_china_vs_world  %>% 
    filter(is_china != 'China')

# Using not_china, draw a line plot cum_cases vs. date
# Add a smooth trend line using linear regression, no error bars
plt_not_china_trend_lin <- ggplot(not_china, aes(x = date, y = cum_cases)) +
  geom_line() +
  geom_smooth(method = "lm", se = FALSE) +
  ylab("Cumulative confirmed cases")

# See the result
plt_not_china_trend_lin 


### From the plot above, we can see a straight line does not fit well at all, and the rest of the world is growing much faster 
### than linearly. What if we added a logarithmic scale to the y-axis?

plt_not_china_trend_lin + 
  scale_y_log10()

```

# Facet Wrap
## Single Facet Wrap
```{r}
ggplot(mpg) + 
  geom_jitter(aes(x=displ, y = hwy,color=class)) +
  facet_wrap(~class)


```

## Multiple Facet Wrap
```{r}

ggplot(mpg) + 
  geom_jitter(aes(x=displ, y = hwy,color=class)) +
  facet_wrap(year~class)


```


# Datatables
```{r, message=FALSE}

#***************************************************************************
### Interactive Data Tables
### https://www.udemy.com/course/r-tidyverse-reporting-and-analytics-for-excel-users/learn/lecture/8797450#overview

library(DT)

mpg %>% datatable()
mpg %>% datatable(rownames = F)


```

## Format Currency
```{r}

mpg %>% datatable(rownames = F) %>% 
  formatCurrency("displ",currency = "$", digits = 2)


```

## Quantile 
```{r}

ctyPercentile <- mpg$cty %>% quantile(c(.25,.75))

mpg %>% datatable(rownames = F) %>% 
  formatCurrency("displ",currency = "$", digits = 2) %>% 
  formatStyle("cty",
      backgroundColor = styleInterval(ctyPercentile,c("green","yellow","red")),
      color = styleInterval(ctyPercentile,c("white","blue","white"))
              ) %>% 
  formatStyle("hwy",background = styleColorBar(mpg$hwy,"steelblue"))

```



```{r}

library(leaflet)
library(ggmap)

leaflet() %>% 
  addTiles()


leaflet() %>% 
    addProviderTiles(provider = "CartoDB")

leaflet() %>% 
    addProviderTiles("Esri")

leaflet() %>% 
    addProviderTiles("CartoDB.PositronNoLabels")


white_house <- "1600 Pennsylvania Avenue NW, Washington, DC 20500"

white_house <-  geocode(white_house)
white_house$places <- "White House"

apple_hq <- geocode("Apple HQ")
apple_hq$places <- "Apple HQ"


leaflet() %>% 
    addProviderTiles(provider = "CartoDB") %>% 
    setView(lng = apple_hq$lon, lat= apple_hq$lat, zoom = 15)



# Dragging Option
leaflet(options = leafletOptions(
                    # Set minZoom and dragging 
                    minZoom = 12.5, dragging = FALSE))  %>% 
  addProviderTiles("CartoDB")  %>% 
  
  # Set default zoom level 
  setView(lng = white_house$lon, lat= white_house$lat, zoom = 15) %>% 
  
  # Set max bounds of map 
  setMaxBounds(lng1 = white_house$lon + .05, 
               lat1 = white_house$lat + .05, 
               lng2 = white_house$lon - .05, 
               lat2 = white_house$lat - .05) 

# add markers
leaflet() %>% 
    addProviderTiles("CartoDB") %>% 
    addMarkers(lng = white_house$lon, lat = white_house$lat)

# add multiple markers
apple_hq <- geocode("Apple HQ")
apple_hq$places <- "Apple HQ"

multiple_markers <- apple_hq %>% union_all(white_house) %>% union_all(white_house)


### Clustering Options
### https://www.youtube.com/watch?v=6Uz5KBZ8V5E
leaflet() %>% 
    addProviderTiles("CartoDB") %>% 
    addMarkers(lng = multiple_markers$lon, lat = multiple_markers$lat, popup = multiple_markers$places,
               clusterOptions = markerClusterOptions()) 



```


